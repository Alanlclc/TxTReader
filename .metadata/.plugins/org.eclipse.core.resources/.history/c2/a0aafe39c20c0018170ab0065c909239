package cn.ksb.minitxt.utils;

import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import cn.ksb.minitxt.common.entity.User;
import cn.ksb.minitxt.server.Init;

public class UserUtils {
	//	1、读取现有XML中的用户信息
	private static final String path = Init.getProperty("");
	private static Map<String , User> users = new HashMap<String , User>();
	static{
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		DocumentBuilder db = null;
		Document doc = null;
		try {
			db = dbf.newDocumentBuilder();
//			提取文件信息
//			读取存储类的用户和密码的键值对；
//			是一个XML文件,存储以上所有文件的路径
//			将文件和路劲分开，以便将来的路径变更所导致的项目代码影响
			doc = db.parse(new FileInputStream(path));
			NodeList usernames = doc.getElementsByTagName("username");
			NodeList passwords = doc.getElementsByTagName("password");
			User user = null;
			for (int i = 0; i < usernames.getLength() ; i++) {
				user = new User();
				user.setUsername(usernames.item(i).getFirstChild().getNodeValue().trim());
				user.setPassword(passwords.item(i).getFirstChild().getNodeValue().trim());
				users.put(user.getUsername(), user);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RuntimeException("配置文件初始化失败，请检查");
		} 
	}
	public static int doLogin(User user){
		
	}
}
