package cn.ksb.minitxt.utils;

import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

import cn.ksb.minitxt.common.constants.UserConstants;
import cn.ksb.minitxt.common.entity.User;
import cn.ksb.minitxt.server.Init;

public class UserUtils {
	//	1、读取现有XML中的用户信息
	private static final String path = Init.getProperty("");
	private static Map<String , User> users = new HashMap<String , User>();
	static{
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		DocumentBuilder db = null;
		Document doc = null;
		try {
			db = dbf.newDocumentBuilder();
//			提取文件信息
//			读取存储类的用户和密码的键值对；
//			是一个XML文件,存储以上所有文件的路径
//			将文件和路劲分开，以便将来的路径变更所导致的项目代码影响
			doc = db.parse(new FileInputStream(path));
			NodeList usernames = doc.getElementsByTagName("username");
			NodeList passwords = doc.getElementsByTagName("password");
			User user = null;
			for (int i = 0; i < usernames.getLength() ; i++) {
				user = new User();
				user.setUsername(usernames.item(i).getFirstChild().getNodeValue().trim());
				user.setPassword(passwords.item(i).getFirstChild().getNodeValue().trim());
				users.put(user.getUsername(), user);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RuntimeException("配置文件初始化失败，请检查");
		} 
	}
//	登录所需要的工具
	public static int doLogin(User user){
		User check = null;
		if((check = users.get(user.getUsername()))!=null){
			if(check.getPassword().equals(user.getPassword())){
				return UserConstants.SUCCESS;
			}else{
				return UserConstants.PASSWORD_INVALID;
			}
		}
		return UserConstants.USERNAME_NOT_EXSITS;
	}
//	将判断方法单独写出来
	public static boolean exists(String username){
		return(users.get(username)!=null);
	}
	
	
//  注册所需要的工具
//	需要注意已有的XML文件是共有的   可能存在多名用户同时注册引起的同步问题
//	即需要考虑更改文件时所发生的线程安全问题
	public static synchronized int doRegister(User user){
		
	}
	
}
